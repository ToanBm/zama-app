import { useEffect, useState, type ReactNode } from 'react';
import {
  initSDK,
  createInstance,
  SepoliaConfig,
} from '@zama-fhe/relayer-sdk/bundle';
import { getAddress } from 'viem';
import { FhevmContext } from '../hooks/useFhevm';
import { useWallet } from '../hooks/useWallet';

export function FhevmProvider({
  children,
  onInstance,
}: {
  children: ReactNode;
  onInstance?: (i: any) => void;
}) {
  const { address: account } = useWallet();
  const [instance, setInstance] = useState<any>();
  const [publicKey, setPublicKey] = useState<string>();
  const [eip712, setEip712] = useState<any>();
  const [signature, setSignature] = useState<string>();

  useEffect(() => {
    (async () => {
      await initSDK();
      const i = await createInstance({
        ...SepoliaConfig,
        network: window.ethereum,
      });

      console.log("✅ Instance created:", i); // <-- GHI LẠI 1

      const kp = i.generateKeypair();
      const eip = i.createEIP712(kp.publicKey, [], Date.now(), 365);

      console.log("🟢 Keypair:", kp);             // <-- GHI LẠI 2
      console.log("🟢 PublicKey:", kp.publicKey);  // <-- GHI LẠI 3
      console.log("🟢 EIP712:", eip);              // <-- GHI LẠI 4

      const normalizedAddress = account ? getAddress(account) : '';
      console.log('Account:', normalizedAddress);

      setInstance(i);
      setPublicKey(kp.publicKey);
      setEip712(eip);

      if (onInstance) onInstance(i); // callback về App.tsx
    })();
  }, [account]);
  

  if (!instance || !publicKey || !eip712) return <div>Initializing FHEVM...</div>;

  return (
    <FhevmContext.Provider
      value={{
        instance,
        publicKey,
        setSignature,
        eip712,
      }}
    >
      {children}
    </FhevmContext.Provider>
  );
}
